<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title><![CDATA[polovko.me]]></title>
 <link href="http://www.polovko.me/atom.xml" rel="self"/>
 <link href="http://www.polovko.me/"/>
 <updated>2014-04-24T02:55:04+04:00</updated>
 <id>http://www.polovko.me</id>
 <author>
   <name><![CDATA[Sergey Polovko]]></name>
   
     <email><![CDATA[sergey@polovko.me]]></email>
   
 </author>

 
 <entry>
   <title type="html"><![CDATA[noNamePost(4)]]></title>
   <link href="http://www.polovko.me/blog/2012/10/06/nonamepost4/"/>
   <updated>2012-10-06T03:48:00+04:00</updated>
   <id>http://www.polovko.me/blog/2012/10/06/nonamepost4</id>
   <content type="html">&lt;h2&gt;Новости&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://static.springsource.org/spring-shell/docs/1.0.0.RELEASE/changelog.txt&quot;&gt;Вышел релиз&lt;/a&gt; командной оболочки &lt;a href=&quot;http://www.springsource.org/spring-shell&quot;&gt;Spring Shell 1.0.0&lt;/a&gt;, облегчающей процесс создания приложений на базе модели Spring. &lt;span class=&#39;label&#39;&gt;#spring&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://in.relation.to/Bloggers/FirstBetaOfHibernateOGMWithInfinispanEhcacheAndMongoDBSupport&quot;&gt;Зарелизили первую&lt;/a&gt; бету &lt;a href=&quot;http://ogm.hibernate.org/&quot;&gt;Hibernate OGM&lt;/a&gt; - хибернейт для NoSQL решений. На данный момент есть поддержка трех хранилищ: &lt;a href=&quot;http://infinispan.org/&quot;&gt;Infinispan&lt;/a&gt;, &lt;a href=&quot;http://ehcache.org/&quot;&gt;Ehcache&lt;/a&gt; и &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt;. Теперь осталось дождаться когда в Spring&#39;e появятся 10+ враперов вокруг всего этого и можно будет смело использовать. &lt;span class=&#39;label&#39;&gt;#hibernate&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#nosql&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Интересные статьи&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://aredko.blogspot.com/2012/09/redis-pubsub-using-spring.html&quot;&gt;Пример использования&lt;/a&gt; Redis pub/sub (как замена JMS) в приложении, использующем Spring. &lt;span class=&#39;label&#39;&gt;#redis&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#spring&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Хорошая &lt;a href=&quot;http://www.atlassian.com/time-wasting-at-work-infographic&quot;&gt;инфографика&lt;/a&gt;, показывающая на что уходит большая часть рабочего времени. &lt;span class=&#39;label&#39;&gt;#productivity&lt;/span&gt;  &lt;!-- more --&gt;&lt;/li&gt;
&lt;li&gt;Интересный &lt;a href=&quot;http://java.dzone.com/articles/inject-slf4j-logger-annotation&quot;&gt;способ инжектить логгер&lt;/a&gt; в спринговых бинах, вместо непосредственного вызова фабричного метода в каждом месте где вам нужен логгер. Взял на заметку. &lt;span class=&#39;label&#39;&gt;#log4j&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Исследование ошибки &lt;a href=&quot;http://javaeesupportpatterns.blogspot.ie/2012/09/outofmemoryerror-unable-to-create-new.html&quot;&gt;OutOfMemoryError: unable to create new native thread&lt;/a&gt; в JavaEE системе. &lt;span class=&#39;label&#39;&gt;#hotspot&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Презентации с JavaOne&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://medianetwork.oracle.com/video/player/1871712019001&quot;&gt;Коротко об основных нововведениях&lt;/a&gt; в Java (JavaFX, проект Lambda, Java Embeded, Compact Profiles, Jigsaw) и JavaEE (JMS 2.0, WebSocket API 1.0, Caching API 1.0, Avatar). Интересный способ проведения технической презентации в виде ток шоу. Очень понравилась презентация NetBeans 7.3. Обязательно его попробую. &lt;span class=&#39;label&#39;&gt;#javaone&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://oracleus.activeevents.com/connect/search.ww?event=javaone&quot;&gt;Более 500 презентаций с JavaOne 2012&lt;/a&gt; появилось в бесплатном доступе. В среднем по часу на одну презентацию - отличный сериал на ближайшие пару месяцев! &lt;span class=&#39;label&#39;&gt;#javaone&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#video&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   <content type="html"><![CDATA[
      <h2>Новости</h2>

<ul>
<li><a href="http://static.springsource.org/spring-shell/docs/1.0.0.RELEASE/changelog.txt">Вышел релиз</a> командной оболочки <a href="http://www.springsource.org/spring-shell">Spring Shell 1.0.0</a>, облегчающей процесс создания приложений на базе модели Spring. <span class='label'>#spring</span></li>
<li><a href="http://in.relation.to/Bloggers/FirstBetaOfHibernateOGMWithInfinispanEhcacheAndMongoDBSupport">Зарелизили первую</a> бету <a href="http://ogm.hibernate.org/">Hibernate OGM</a> - хибернейт для NoSQL решений. На данный момент есть поддержка трех хранилищ: <a href="http://infinispan.org/">Infinispan</a>, <a href="http://ehcache.org/">Ehcache</a> и <a href="http://www.mongodb.org/">MongoDB</a>. Теперь осталось дождаться когда в Spring'e появятся 10+ враперов вокруг всего этого и можно будет смело использовать. <span class='label'>#hibernate</span> <span class='label'>#nosql</span></li>
</ul>


<h2>Интересные статьи</h2>

<ul>
<li><a href="http://aredko.blogspot.com/2012/09/redis-pubsub-using-spring.html">Пример использования</a> Redis pub/sub (как замена JMS) в приложении, использующем Spring. <span class='label'>#redis</span> <span class='label'>#spring</span></li>
<li>Хорошая <a href="http://www.atlassian.com/time-wasting-at-work-infographic">инфографика</a>, показывающая на что уходит большая часть рабочего времени. <span class='label'>#productivity</span>  
      
      
        <div><a href="http://www.polovko.me/blog/2012/10/06/nonamepost4/">Читать дальше &rarr;</a></div>
      
    ]]></content>
 </entry>
 
 <entry>
   <title type="html"><![CDATA[Введение в JIT компиляцию]]></title>
   <link href="http://www.polovko.me/blog/2012/10/04/vvedenie-v-jit-kompilyaciyu/"/>
   <updated>2012-10-04T05:40:00+04:00</updated>
   <id>http://www.polovko.me/blog/2012/10/04/vvedenie-v-jit-kompilyaciyu</id>
   <content type="html">&lt;p&gt;Виртуальная машина Java HotSpot VM (доставшаяся Oracle после приобретения компании Sun Microsystems)  составляет основу как для виртуальной машины Java (JVM), так и для OpenJDK (проект с открытым исходным кодом). Как и все виртуальные машины Java HotSpot VM обеспечивает необходимую среду для выполнения байт-кода. На практике она отвечает за три основные функции:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;интерпретация байт-кода&lt;/li&gt;
&lt;li&gt;поиск, загрузка и проверка типов (так называемая загрузка классов)&lt;/li&gt;
&lt;li&gt;управление памятью&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Эта статья фокусируется на интерпретации байт-кода, а именно на оптимизациях, проводимых в виртуальной машине. &lt;!-- more --&gt;&lt;/p&gt;

&lt;h2&gt;JIT-компиляция&lt;/h2&gt;

&lt;p&gt;Java HotSpot VM помимо непосредственной интерпретации байт-кода может выполнять компиляцию байт-кода (отдельных методов целиком) в машинные инструкции для ускорения процесса выполнения.&lt;/p&gt;

&lt;p&gt;Если виртуальной машине передать параметр &lt;code&gt;-XX:+PrintCompilation&lt;/code&gt;, то &lt;a href=&quot;https://gist.github.com/1165804#file_notes.md&quot;&gt;можно увидеть&lt;/a&gt; как были скомпилированы методы. Эта компиляция происходит во время исполнения, после того как метод уже был выполнен несколько раз. Ожидание фактического использования метода дает возможность Java HotSpot VM сделать боле точное решение о том, как оптимизировать код путем компиляции.&lt;/p&gt;

&lt;p&gt;Если вам интересно какой выигрыш дает JIT, вы можете отключить ее используя параметр &lt;code&gt;-Djava.compiler=none&lt;/code&gt; и затем посмотреть как изменились результаты ваших тестов.&lt;/p&gt;

&lt;p&gt;Java HotSpot VM способна работать в двух независимых режимах: &lt;strong&gt;server&lt;/strong&gt; или &lt;strong&gt;client&lt;/strong&gt;. Конкретный режим выбирается путем указания одноименного параметра &lt;code&gt;-server&lt;/code&gt; или &lt;code&gt;-client&lt;/code&gt; в момент запуска JVM (необходимо чтобы это был первый параметр в командной строке). В зависимости от конкретной ситуации предпочтительно использовать тот или иной режим. В этой статье будет использоваться режим &lt;strong&gt;server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Основное различие между этими двумя режимами заключается в том, что в режиме &lt;strong&gt;server&lt;/strong&gt; выполняются более агрессивные оптимизации, основанные на предположениях, которые не всегда могут быть выполнены. Для оптимизации всегда проверяется верно ли соответствующее предположение об оптимизации. Если по каким-то причинам предположение не действительно, Java HotSpot VM откатывает оптимизацию и возвращает метод в режим интерпретации байт-кода. Такое поведение означает, что Java HotSpot VM никогда не сделает неверную оптимизацию.&lt;/p&gt;

&lt;p&gt;По-умолчанию в режиме &lt;strong&gt;server&lt;/strong&gt; Java HotSpot VM выполнит метод 10 000 раз в режиме интерпретации прежде чем скомпилирует его. Вы можете регулировать это значение выставив параметр &lt;strong&gt;CompileThreshold&lt;/strong&gt;. Например, использование &lt;code&gt;-XX:CompileThreshold=5000&lt;/code&gt; приведет к тому, что Java HotSpot VM выполнит метод 5 000 раз прежде чем скомпилирует его.&lt;/p&gt;

&lt;p&gt;Может показаться заманчивым уменьшить порог компиляции до очень маленького значения. Однако, это может привести к падению производительности, так как будет затрачено время на компиляцию методов не выполняющихся так часто чтобы покрыть накладные расходы на их компиляцию.&lt;/p&gt;

&lt;p&gt;Наибольшей эффективности Java HotSpot VM достигает тогда, когда она может собрать достаточно статистики, чтобы принять разумное решение о том, что скомпилировать. Если вы уменьшите порог компиляции, Java HotSpot VM может потратить огромное количество времени компилируя методы, которые выполняются не так часто. Некоторые оптимизации выполняются только тогда, когда достаточно статистики было собрано. Так что код может быть не таким оптимальным каким бы он мог быть.&lt;/p&gt;

&lt;p&gt;С другой стороны многие разработчики хотят достичь лучшей производительности для важных методов (путем их компиляции) как можно раньше. Одно из стандартных решений данной проблемы - прогрев (например, подача тестового трафика на систему) после старта процесса, который позволит проанализировать выполнение достаточно для запуска компиляции.&lt;/p&gt;

&lt;p&gt;В Java HotSpot VM есть множество параметров, которые увеличивают количество выводимой о JIT информации. Наиболее часто используется &lt;strong&gt;PrintCompilation&lt;/strong&gt; (который мы уже видели), но есть несколько других.&lt;/p&gt;

&lt;p&gt;Мы будем использовать &lt;strong&gt;PrintCompilation&lt;/strong&gt; для наблюдения за эффектами компиляции методов в Java HotSpot VM во время исполнения. Но для начала нужно сказать пару слов о методе &lt;strong&gt;System.nanoTime()&lt;/strong&gt; для замера времени.&lt;/p&gt;

&lt;h2&gt;Таймеры&lt;/h2&gt;

&lt;p&gt;В Java мы можем получить доступ к двум таймерам: &lt;strong&gt;currentTimeMillis()&lt;/strong&gt; и &lt;strong&gt;nanoTime()&lt;/strong&gt;. Первый достаточно близко соответствует времени, которое мы наблюдаем в физическом мире. Его разрешения достаточно для большинства целей, но не для приложений с низкой задержкой.&lt;/p&gt;

&lt;p&gt;Наносекундный таймер является альтернативой с более высоким разрешением. Этот таймер измеряет время в невероятно коротких интервалах. Одна наносекунда - это время, за которое свет пройдет 20 сантиметров в волоконно-оптическом кабеле. В отличии от этого, требуется 27,5 мс для того, чтобы свет прошел расстояние от Лондона до Нью-Йорка по волоконно-оптическому кабелю.&lt;/p&gt;

&lt;p&gt;В связи с очень высоким разрешением наносекундного таймера требуется с осторожностью обращаться с ним.&lt;/p&gt;

&lt;p&gt;Например, &lt;strong&gt;currentTimeMillis()&lt;/strong&gt; как правило синхронизировано между машинами достаточно хорошо и может использоваться для замера сетевых задержек. Но &lt;strong&gt;nanoTime()&lt;/strong&gt; не обладает таким свойством.&lt;/p&gt;

&lt;h2&gt;Встраивание методов&lt;/h2&gt;

&lt;p&gt;Одна из ключевых оптимизаций JIT-компиляции (но не javac) - это встраивание методов: копирование тела метода в метод, который вызвал его и устранение вызова. Эта функциональность очень важна, так как стоимость вызова простого метода может быть больше в сравнении с производимой им работой.&lt;/p&gt;

&lt;p&gt;JIT-компилятор может выполнять постепенное встраивание, то есть начать с встраивания простых методов и затем переходить на большие и большие блоки кода пока другие оптимизации не станут возможными.&lt;/p&gt;

&lt;p&gt;Рассмотрим следующий код, сравнивающий производительность различных способов доступа к полям:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;прямой доступ к открытому полю класса (&lt;strong&gt;DFACaller&lt;/strong&gt;),&lt;/li&gt;
&lt;li&gt;через гетер и сетер (&lt;strong&gt;GetSetCaller&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.concurrent.Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.management.ManagementFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeTestRun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// время с момента запуска&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uptime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ManagementFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntimeMXBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUptime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// выдуманный фактор&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;mi&quot;&gt;11000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// ПРИМЕЧАНИЕ: сумма значений возвращается как double для&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// предотвращения агрессивной JIT-компиляции (устранения цикла)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directCall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DFACaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viaGetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetSetCaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeTestRun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;public fields&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directCall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeTestRun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;get/set fields&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viaGetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%7d %,7d\t\tfield access=%.1f ns, get/set=%.1f ns%n&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uptime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// добавляем задержку для улучшения вывода программы&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.concurrent.Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DFACaller&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DFACaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DirecFieldAccess&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DirecFieldAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;direct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirecFieldAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.concurrent.Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetSetCaller&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSetCaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ViaGetSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViaGetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;getSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViaGetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;h3&gt;Объединение JVM&lt;/h3&gt;

&lt;p&gt;Инженеры Oracle работают над объединением Java HotSpot VM и Oracle JRockit в одно решение, которое будет наделено лучшими возможностями каждой виртуальной машины. Полученную виртуальную машину Oracle планирует внести в проект с открытым исходным кодом - OpenJDK. Вот ключевые моменты этого объединения:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Oracle JRockit и HotSpot будут слиты в одну JVM, включающую лучшие возможности обоих.&lt;/li&gt;
&lt;li&gt;Полученная JVM будет базироваться на коде HotSpot с импортированными возможностями из Oracle JRockit.&lt;/li&gt;
&lt;li&gt;Результат будет постепенно внесен в OpenJDK.&lt;/li&gt;
&lt;li&gt;Некоторые существующие решения (такие как Mission Control в Oracle JRocket) останутся проприетарными.&lt;/li&gt;
&lt;li&gt;Oracle будет и в дальнейшем распространять бесплатные бинарные пакеты JDK и JRE, которые включают некоторые элементы закрытого кода.&lt;/li&gt;
&lt;li&gt;Процесс объединения JVM будет многолетним.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Более подробную информацию о слиянии JVM можно прочитать в статье &lt;a href=&quot;https://blogs.oracle.com/henrik/entry/oracles_jvm_strategy&quot;&gt;Oracle&#39;s JVM Strategy&lt;/a&gt; - Henrik Stahl (старший директор по управлению продуктами Java Platform Group в Oracle). Чтобы узнать больше о HotSpot, посетите страницу &lt;a href=&quot;http://openjdk.java.net/groups/hotspot/&quot;&gt;OpenJDK HotSpot&lt;/a&gt;. Полный список улучшений JDK вы можете увидеть в &lt;a href=&quot;http://openjdk.java.net/jeps/0&quot;&gt;каталоге JEP&lt;/a&gt;. Чтобы следить за развитием JVM можно подписаться на email-рассылку &lt;a href=&quot;http://mail.openjdk.java.net/mailman/listinfo/hotspot-dev&quot;&gt;hotspot-dev@openjdk.java.net&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Гетеры и сетеры - первые кандидаты на встраивание. Это простые методы, которые будут намного &quot;дороже&quot; если они не встроены, так как вызов метода более дорогая операция, чем прямое обращение к полю.&lt;/p&gt;

&lt;p&gt;Скомпилируем эти классы и выполним тестирование:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;jamel&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@mac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.7.0_07&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HotSpot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;23.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mixed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jamel&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@mac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jamel&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@mac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javac&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DFACaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetSetCaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jamel&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@mac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jamel&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@mac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;XX:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrintCompilation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;на моей машине (2.8 GHz Intel Core i7, MacOS X 10.7) вывод был таким:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;     &lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;mi&quot;&gt;62&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3430.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3330.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;156&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;140.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;568.9&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;261&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;67.3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;481.3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;284&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;             &lt;span class=&quot;nl&quot;&gt;ViaGetSet:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;364&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;47.3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;201.5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;             &lt;span class=&quot;nl&quot;&gt;ViaGetSet:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;493&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;109.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;403.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;591&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;             &lt;span class=&quot;nl&quot;&gt;DFACaller:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;591&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;             &lt;span class=&quot;nl&quot;&gt;GetSetCaller:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;569&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;180.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;346.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;671&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;30.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;772&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;875&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;000&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Что все это значит? Числа в первом столбце показывают время в миллисекундах с момента старта программы. Во втором столбце отображается ID метода (для скомпилированных методов) или количество итераций, выполненых в тесте.&lt;/p&gt;

&lt;p&gt;Обратите внимание, что метод hashCode класса String в тесте непосредственно не использовался, но все же был скомпилирован, так как он использовался самой платформой.&lt;/p&gt;

&lt;p&gt;Во 2-й строке можно увидеть, что оба способа обращения к полю довольно медленные, так как при первом запуске необходимо было выполнить загрузку соответствующих классов. В следующей строке мы видим, что тест выполнился значительно быстрее хотя никакой компиляции еще не произошло.&lt;/p&gt;

&lt;p&gt;Также заметим следующее:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;В тестах на 1 000 и 5 000 итераций прямой доступ к полю быстрее чем через вызовы методов get/set, так как они еще не были встроены или как-то оптимизированы. Даже не смотря на это оба способа работают достаточно быстро.&lt;/li&gt;
&lt;li&gt;На 9 000 итераций, гетер был оптимизирован (он вызывается дважды за итерацию), что дает небольшое улучшение производительности.&lt;/li&gt;
&lt;li&gt;На 10 000 итерациях был оптимизирован сетер. Дополнительное время (затраченное на выполнение оптимизации) привело к тому, что общее время теста увеличилось (403 нс вместо 201.5 нс)&lt;/li&gt;
&lt;li&gt;И наконец методы &lt;strong&gt;call()&lt;/strong&gt; классов &lt;strong&gt;DFACaller&lt;/strong&gt; и &lt;strong&gt;GetSetCaller&lt;/strong&gt; были оптимизированы:

&lt;ul&gt;
&lt;li&gt;гетер и сетер были не просто оптимизированы, но еще и встроены в &lt;strong&gt;GetSetCaller&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;на следующей итерации можно заметить, что время выполнения тестов все еще не оптимально.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;После 13 000 итераций, производительность каждого метода практически сравнялась. Мы достигли производительности установившегося состояния.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Важно отметить, что в установившемся состоянии выполнения доступ к полям напрямую или через методы get/set выполняются одинаково, так как методы были встроены в методы класса GetSetCaller. Таким образом код в классе GetSetCaller выполняет те же действия, что и код в классе DFACaller.&lt;/p&gt;

&lt;p&gt;JIT-компиляция выполняется в фоне именно тогда, когда определенная оптимизация становится возможной для выполнения (изменяясь от машины к машине и реже от запуска к запуску).&lt;/p&gt;

&lt;h2&gt;Заключение&lt;/h2&gt;

&lt;p&gt;В этой статье была рассмотрена только верхушка айсберга JIT-компиляции в Java HotSpot VM. В частности не были отражены важные аспекты написания хороших тестов и то как использовать статистику, чтобы гарантировать, что динамическая природа платформы не дурит нас.&lt;/p&gt;

&lt;p&gt;Тесты, использовавшиеся здесь довольно простые и вряд ли подойдут для реальных замеров. Во второй части статьи будет показано как поставить более реалистичные тесты и детально рассмотрен код, производимый JIT-компилятором.&lt;/p&gt;

&lt;p&gt;Это вольный перевод статьи &lt;a href=&quot;http://www.oraclejavamagazine-digital.com/javamagazine/20120506?folio=48#pg49&quot;&gt;Introduction to JIT Compilation in Java HotSpot VM&lt;/a&gt; Бена Эванса и Питера Лоурея, опубликованной в майском номере журнала Java Magazine.&lt;/p&gt;
</content>
   <content type="html"><![CDATA[
      <p>Виртуальная машина Java HotSpot VM (доставшаяся Oracle после приобретения компании Sun Microsystems)  составляет основу как для виртуальной машины Java (JVM), так и для OpenJDK (проект с открытым исходным кодом). Как и все виртуальные машины Java HotSpot VM обеспечивает необходимую среду для выполнения байт-кода. На практике она отвечает за три основные функции:</p>

<ul>
<li>интерпретация байт-кода</li>
<li>поиск, загрузка и проверка типов (так называемая загрузка классов)</li>
<li>управление памятью</li>
</ul>


<p>Эта статья фокусируется на интерпретации байт-кода, а именно на оптимизациях, проводимых в виртуальной машине. 
      
      
        <div><a href="http://www.polovko.me/blog/2012/10/04/vvedenie-v-jit-kompilyaciyu/">Читать дальше &rarr;</a></div>
      
    ]]></content>
 </entry>
 
 <entry>
   <title type="html"><![CDATA[noNamePost(3)]]></title>
   <link href="http://www.polovko.me/blog/2012/10/03/nonamepost3/"/>
   <updated>2012-10-03T03:01:00+04:00</updated>
   <id>http://www.polovko.me/blog/2012/10/03/nonamepost3</id>
   <content type="html">&lt;h2&gt;Новости&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Oracle &lt;a href=&quot;https://blogs.oracle.com/javaone/entry/duke_s_choice_award_ceremony&quot;&gt;объявил&lt;/a&gt; победителей 10й ежегодной премии Duke’s Choice Awards в 2012 году. Также объявили о том, что на региональных конференциях JavaOne теперь тоже будут давать подобную награду. А это значит, что кому-то надо будет вовремя подать заявку в следующем году чтобы не упустить награду. &lt;span class=&#39;label&#39;&gt;#javaone&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://architects.dzone.com/articles/red-hats-next-steps-jboss-app&quot;&gt;Стратегические изменения&lt;/a&gt; в JBoss Application Serevr. Из интересного: партнерство с 10gen (авторы MongoDB) для создания проекта &lt;a href=&quot;http://www.hibernate.org/subprojects/ogm.html&quot;&gt;Hibernate OGM&lt;/a&gt;, гибридные облака (возможность использовать облачную платформу отличную от RedHat&#39;овской родной &lt;a href=&quot;http://www.openshift.com/&quot;&gt;OpenShift&lt;/a&gt;), поддержка различных вариантов альтернативных архитектур и языков (среди прочего Spring Framework, Ruby, Clojure, Ceylon, Scala), проект &lt;a href=&quot;http://www.jboss.org/aerogear/&quot;&gt;AeroGear&lt;/a&gt; для поддержки мобильного веба, смена имени проекта. &lt;span class=&#39;label&#39;&gt;#jboss&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Вышла первая бета &lt;a href=&quot;https://blogs.oracle.com/javase/entry/6u38_early_access_is_now&quot;&gt;Java SE 6u38&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#jdk&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Сегодня на JavaOne объявили о выходе превью версии &lt;a href=&quot;http://www.oracle.com/us/corporate/press/1857954&quot;&gt;NetBeans IDE 7.3&lt;/a&gt;. Из нового: поддержка HTML 5, новый редактор JavaScript c автодополнениями jQuery, поддержка responsive-верстки и автодополнения CSS3, улучшена интеграция с Google Chrome. &lt;span class=&#39;label&#39;&gt;#netbeans&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Со-основатель SpringSource &lt;a href=&quot;http://gigaom.com/cloud/typesafe-home-of-scala-brings-springsource-co-founder-rod-johnson-aboard/&quot;&gt;Rod Johnson перешел в Typesafe&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#typesafe&lt;/span&gt;  &lt;!-- more --&gt;&lt;/li&gt;
&lt;li&gt;Jason van Zyl (автор Apache Maven) решил &lt;a href=&quot;http://www.informationweek.com/software/enterprise-applications/maven-developer-van-zyl-focuses-on-code/240008278&quot;&gt;подумать о безопасности&lt;/a&gt;. Да им стоит задуматься, ведь именно на их серверах лежат те jar&#39;ки, которые потом попадают в наши проекты. &lt;span class=&#39;label&#39;&gt;#maven&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#security&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Еще можно успеть &lt;a href=&quot;https://www4.gotomeeting.com/register/662905759&quot;&gt;зарегистрироваться&lt;/a&gt; на бесплатный вебинар &lt;a href=&quot;http://blog.jetbrains.com/blog/2012/09/25/free-webinar-what%E2%80%99s-new-in-project-kotlin/&quot;&gt;What’s New in Project Kotlin&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#kotlin&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Интересные статьи&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.oracle.com/jcp/entry/101_to_participate&quot;&gt;101 способ&lt;/a&gt; как сделать Java лучше. &lt;span class=&#39;label&#39;&gt;#jcp&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Презентация с конференции JavaOne - &lt;a href=&quot;http://blogs.oracle.com/darcy/resource/JavaOne/J1_2012-Jdk7Action.pdf&quot;&gt;JDK 7 in Action&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#java&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#comunity&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Хоть и старая, но очень полезная статья про NoSQL базы данных - &lt;a href=&quot;http://highscalability.com/blog/2010/12/6/what-the-heck-are-you-actually-using-nosql-for.html&quot;&gt;What The Heck Are You Actually Using NoSQL For?&lt;/a&gt;, с описанием различных юскейсов для конкретной NoSQL DB. &lt;span class=&#39;label&#39;&gt;#nosql&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Проверьте еще раз (на всякий случай) &lt;a href=&quot;http://howto.cnet.com/8301-11310_39-57523821-285/how-to-disable-java-in-ie-firefox-chrome-and-safari/&quot;&gt;отключили ли вы поддержку Java&lt;/a&gt; в своем браузере. &lt;span class=&#39;label&#39;&gt;#security&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.yohanliyanage.com/2012/09/eventing-with-spring-framework/&quot;&gt;Пример&lt;/a&gt; как можно передавать сообщения через спринговый ApplicationContext. Удобно если нужно сделать простое решение, Spring уже в проекте есть, а огород с каким-нибудь JMS не хочется городить. &lt;span class=&#39;label&#39;&gt;#spring&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Книги&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ben Evans и Martjin Verburg - &lt;a href=&quot;http://www.amazon.com/gp/product/1617290068&quot;&gt;The Well-Grounded Java Developer&lt;/a&gt;. В книге они описывают почему это так &quot;дорого&quot; добавлять новые возможности в JVM. Добавить новое расширение библиотеки такое как fork/join или синтаксический сахар в виде строк в swich&#39;ах относительно легко, но добавить JVM инструкцию такую как invokedynamic очень не просто. Именно поэтому мы не наблюдаем значительных изменений в Java начиная с версии 1.0. Все это описано в первой главе книге, которую можно скачать &lt;a href=&quot;http://www.manning.com/evans/TWGJD_sample_ch01.pdf&quot;&gt;здесь&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#jdk7&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#book&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Разное&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=net.networksaremadeofstring.cyllell&quot;&gt;Cyllell&lt;/a&gt; - андроидный клиент для &lt;a href=&quot;http://www.opscode.com/chef/&quot;&gt;Chef&lt;/a&gt;. Есть &lt;a href=&quot;http://java.dzone.com/articles/android-client-opscode%E2%80%99s-chef&quot;&gt;статья&lt;/a&gt; от автора. Жаль нет устройства с андроидом... &lt;span class=&#39;label&#39;&gt;#chef&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#android&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Gitris: GitHub + Tetris + SSH = &lt;a href=&quot;http://gitris.com/&quot;&gt;gitris.com&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#geekfun&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   <content type="html"><![CDATA[
      <h2>Новости</h2>

<ul>
<li>Oracle <a href="https://blogs.oracle.com/javaone/entry/duke_s_choice_award_ceremony">объявил</a> победителей 10й ежегодной премии Duke’s Choice Awards в 2012 году. Также объявили о том, что на региональных конференциях JavaOne теперь тоже будут давать подобную награду. А это значит, что кому-то надо будет вовремя подать заявку в следующем году чтобы не упустить награду. <span class='label'>#javaone</span></li>
<li><a href="http://architects.dzone.com/articles/red-hats-next-steps-jboss-app">Стратегические изменения</a> в JBoss Application Serevr. Из интересного: партнерство с 10gen (авторы MongoDB) для создания проекта <a href="http://www.hibernate.org/subprojects/ogm.html">Hibernate OGM</a>, гибридные облака (возможность использовать облачную платформу отличную от RedHat'овской родной <a href="http://www.openshift.com/">OpenShift</a>), поддержка различных вариантов альтернативных архитектур и языков (среди прочего Spring Framework, Ruby, Clojure, Ceylon, Scala), проект <a href="http://www.jboss.org/aerogear/">AeroGear</a> для поддержки мобильного веба, смена имени проекта. <span class='label'>#jboss</span></li>
<li>Вышла первая бета <a href="https://blogs.oracle.com/javase/entry/6u38_early_access_is_now">Java SE 6u38</a>. <span class='label'>#jdk</span></li>
<li>Сегодня на JavaOne объявили о выходе превью версии <a href="http://www.oracle.com/us/corporate/press/1857954">NetBeans IDE 7.3</a>. Из нового: поддержка HTML 5, новый редактор JavaScript c автодополнениями jQuery, поддержка responsive-верстки и автодополнения CSS3, улучшена интеграция с Google Chrome. <span class='label'>#netbeans</span></li>
<li>Со-основатель SpringSource <a href="http://gigaom.com/cloud/typesafe-home-of-scala-brings-springsource-co-founder-rod-johnson-aboard/">Rod Johnson перешел в Typesafe</a>. <span class='label'>#typesafe</span>  
      
      
        <div><a href="http://www.polovko.me/blog/2012/10/03/nonamepost3/">Читать дальше &rarr;</a></div>
      
    ]]></content>
 </entry>
 
 <entry>
   <title type="html"><![CDATA[noNamePost(2)]]></title>
   <link href="http://www.polovko.me/blog/2012/10/01/nonamepost2/"/>
   <updated>2012-10-01T01:43:00+04:00</updated>
   <id>http://www.polovko.me/blog/2012/10/01/nonamepost2</id>
   <content type="html">&lt;h2&gt;Новости&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Вышла первая бета библиотеки логирования - &lt;a href=&quot;http://logging.apache.org/log4j/2.x/&quot;&gt;Log4j 2&lt;/a&gt;. Улучшили &lt;a href=&quot;http://logging.apache.org/log4j/2.x/performance.html&quot;&gt;производительность&lt;/a&gt;, добавили &lt;a href=&quot;http://logging.apache.org/log4j/2.x/manual/appenders.html#AsynchAppender&quot;&gt;асинхронный аппендер&lt;/a&gt;, пофиксили &lt;a href=&quot;http://logging.apache.org/log4j/2.x/changes-report.html#a2.0-beta1&quot;&gt;много багов&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#log4j&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Oracle выложила видео и слайды с прошедшей этим летом конференции &lt;a href=&quot;http://openjdk.java.net/projects/mlvm/jvmlangsummit/&quot;&gt;JVM Language Summit&lt;/a&gt;, посвященной разработке языков программирования под JVM и разработке самой JVM. &lt;span class=&#39;label&#39;&gt;#conference&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#video&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Вышли новые версии Java Embeded от Oracle - &lt;a href=&quot;http://www.oracle.com/technetwork/java/embedded/overview/javame/index.html&quot;&gt;Java ME Embeded 3.2&lt;/a&gt; (Java ME, оптимизированная для работы на устройствах с очень маленькими микроконтроллерами) и &lt;a href=&quot;http://www.oracle.com/technetwork/java/embedded/overview/java-embedded-suite/index.html&quot;&gt;Java Embedded Suite 7.0&lt;/a&gt; (интегрированный стек промежуточного ПО для встраиваемых устройств). &lt;span class=&#39;label&#39;&gt;#jme&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#embeded&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mreinhold.org/blog/on-the-next-train&quot;&gt;Jigsaw отложили&lt;/a&gt; до выхода Java 9. Целью проекта Jigsaw является разработка и внедрение стандартной модульной системы для платформы Java SE, а также применение этой системы к самой платформе и JDK. Что-то среднее между модулями в maven (этап сборки) и модулями OSGi (этап выполнения). &lt;span class=&#39;label&#39;&gt;#jigsaw&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#jcp&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Проект &lt;a href=&quot;http://www.cloudera.com/blog/2012/09/apache-hadoop-wins-dukes-choice-award-is-a-java-ecosystem-mvp/&quot;&gt;Apache Hadoop выиграл&lt;/a&gt; награду Duke&#39;s Choice Award тем самым получив статус наиболее значимого продукта в экосистеме Java (MVP, Most Valuable Player). &lt;a href=&quot;http://java.com/en/dukeschoice/&quot;&gt;Проекты&lt;/a&gt;, получившие награду в прошлом году. &lt;span class=&#39;label&#39;&gt;#hadoop&lt;/span&gt;  &lt;!-- more --&gt;&lt;/li&gt;
&lt;li&gt;В предстоящий &lt;a href=&quot;http://www.oracle.com/us/corporate/press/1855300&quot;&gt;релизе MySQL 5.6.7&lt;/a&gt; включили &lt;a href=&quot;https://blogs.oracle.%20com/mysqlinnodb/entry/new_enhancements_for_innodb_memcached&quot;&gt;усовершенствования InnoDB Memcached&lt;/a&gt;. Из фич: поддержка маппинга нескольких таблиц; добавлен фоновый поток, выполняющий автокоммит длительных транзакций; улучшена производительность бинлога. &lt;span class=&#39;label&#39;&gt;#mysql&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#nosql&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Сегодня на Coursera стартовала вторая версия &lt;a href=&quot;https://class.coursera.org/compilers-2012-002/&quot;&gt;курса, посвященного разработке компиляторов&lt;/a&gt;. Ведет курс профессор стэндфордского университета Алекс Эйкен. По опыту первой версии могу сказать, что теория будет рассматриваться на примере языка программирования COOL (Classroom Object Oriented Language), а также вся последняя лекция будет посвящена Java. &lt;span class=&#39;label&#39;&gt;#compilers&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#coursera&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javamagazine/index.html&quot;&gt;Сентябрьский выпуск&lt;/a&gt; журнала Java Magazine. Если кто еще не подписался очень советую это сделать. &lt;span class=&#39;label&#39;&gt;#magazine&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Статьи&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Авторы книги &lt;a href=&quot;http://www.manning.com/roestenburg/&quot;&gt;Akka in Action&lt;/a&gt; - Raymond Roestenburg и Rob Bakker написали про то &lt;a href=&quot;http://weblogs.java.net/blog/manningpubs/archive/2012/09/28/testing-actors-akka&quot;&gt;как тестировать акторы в Scala&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#akka&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#testing&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://habrahabr.ru/post/152765/&quot;&gt;Статья&lt;/a&gt; о том как запускать DBDeploy из скрипта Gradle. &lt;span class=&#39;label&#39;&gt;#db&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#gradle&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/ru/library/j-ft10/index.html&quot;&gt;Шаблоны проектирования для функционального программирования&lt;/a&gt;. На примерах в Scala и Groovy Нил Форд рассмотрел шаблоны Factory, Strategy, Singleton и Template Method реализованные в функциональном стиле. &lt;span class=&#39;label&#39;&gt;#funprog&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.atlassian.com/2012/09/5-steps-to-build-a-killer-dashboard/&quot;&gt;5 шагов&lt;/a&gt; как настроить удобный дашборд в Jira. Взял на заметку. &lt;span class=&#39;label&#39;&gt;#jira&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#tips&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Книги&lt;/h2&gt;

&lt;p&gt;Недавно вышедшие книги по Java и связанным с ней технологиям:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Второе издание &lt;a href=&quot;http://www.lulu.com/shop/adam-bien/real-world-java-ee-patterns-rethinking-best-practices/paperback/product-20372080.html&quot;&gt;Real World Java EE Patterns-Rethinking Best Practices&lt;/a&gt; по Java EE 6. &lt;span class=&#39;label&#39;&gt;#jee&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Arun Gupta - &lt;a href=&quot;http://shop.oreilly.com/product/0636920026464.do&quot;&gt;Java EE 6 Pocket Guide&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#jee&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Edward Capriolo, Dean Wampler, Jason Rutherglen - &lt;a href=&quot;http://shop.oreilly.com/product/0636920023555.do&quot;&gt;Programming Hive&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#hive&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Разное&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://javadoc.bugaco.com/com/sun/java/swing/plaf/nimbus/InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneMaximizeButtonPainter.html&quot;&gt;&quot;Локаничное&quot; имя класса&lt;/a&gt; в Swing длинной 79 символов. Интересно как такое могли принять? &lt;span class=&#39;label&#39;&gt;#geekfun&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Еще один &lt;a href=&quot;http://www.youtube.com/watch?v=gR1PujzQ53Q&amp;amp;feature=plcp&quot;&gt;видео-прикол&lt;/a&gt; на тему .NET vs Java. Плакал после &quot;мой сын монстр!&quot; :) &lt;span class=&#39;label&#39;&gt;#geekfun&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#video&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   <content type="html"><![CDATA[
      <h2>Новости</h2>

<ul>
<li>Вышла первая бета библиотеки логирования - <a href="http://logging.apache.org/log4j/2.x/">Log4j 2</a>. Улучшили <a href="http://logging.apache.org/log4j/2.x/performance.html">производительность</a>, добавили <a href="http://logging.apache.org/log4j/2.x/manual/appenders.html#AsynchAppender">асинхронный аппендер</a>, пофиксили <a href="http://logging.apache.org/log4j/2.x/changes-report.html#a2.0-beta1">много багов</a>. <span class='label'>#log4j</span></li>
<li>Oracle выложила видео и слайды с прошедшей этим летом конференции <a href="http://openjdk.java.net/projects/mlvm/jvmlangsummit/">JVM Language Summit</a>, посвященной разработке языков программирования под JVM и разработке самой JVM. <span class='label'>#conference</span> <span class='label'>#video</span></li>
<li>Вышли новые версии Java Embeded от Oracle - <a href="http://www.oracle.com/technetwork/java/embedded/overview/javame/index.html">Java ME Embeded 3.2</a> (Java ME, оптимизированная для работы на устройствах с очень маленькими микроконтроллерами) и <a href="http://www.oracle.com/technetwork/java/embedded/overview/java-embedded-suite/index.html">Java Embedded Suite 7.0</a> (интегрированный стек промежуточного ПО для встраиваемых устройств). <span class='label'>#jme</span> <span class='label'>#embeded</span></li>
<li><a href="http://mreinhold.org/blog/on-the-next-train">Jigsaw отложили</a> до выхода Java 9. Целью проекта Jigsaw является разработка и внедрение стандартной модульной системы для платформы Java SE, а также применение этой системы к самой платформе и JDK. Что-то среднее между модулями в maven (этап сборки) и модулями OSGi (этап выполнения). <span class='label'>#jigsaw</span> <span class='label'>#jcp</span></li>
<li>Проект <a href="http://www.cloudera.com/blog/2012/09/apache-hadoop-wins-dukes-choice-award-is-a-java-ecosystem-mvp/">Apache Hadoop выиграл</a> награду Duke's Choice Award тем самым получив статус наиболее значимого продукта в экосистеме Java (MVP, Most Valuable Player). <a href="http://java.com/en/dukeschoice/">Проекты</a>, получившие награду в прошлом году. <span class='label'>#hadoop</span>  
      
      
        <div><a href="http://www.polovko.me/blog/2012/10/01/nonamepost2/">Читать дальше &rarr;</a></div>
      
    ]]></content>
 </entry>
 
 <entry>
   <title type="html"><![CDATA[noNamePost(1)]]></title>
   <link href="http://www.polovko.me/blog/2012/09/28/nonamepost1/"/>
   <updated>2012-09-28T14:35:00+04:00</updated>
   <id>http://www.polovko.me/blog/2012/09/28/nonamepost1</id>
   <content type="html">&lt;h2&gt;Новости&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.security-explorations.com/en/about.html&quot;&gt;Adam Gowdiak и Ко&lt;/a&gt; в очередной раз (уже юбилейный 50й!) &lt;a href=&quot;http://seclists.org/fulldisclosure/2012/Sep/170&quot;&gt;нашли уязвимость&lt;/a&gt;, позволяющую обойти ограничения песочницы во всех последних версиях Java SE (5u22, 6u35, 7u7). За последние лет 5 не видел ни одного сайта с java-аплетами и во всех браузерах у себя уже давно выключил их поддержку, чего и Вам советую. &lt;span class=&#39;label&#39;&gt;#security&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;В JDK8 &lt;a href=&quot;http://java.dzone.com/articles/introducing-new-date-and-time&quot;&gt;представлен&lt;/a&gt; новый API для работы с датами. По-моему отличная замена наполовину задеприкейченному java.util.Date. Также есть проект &lt;a href=&quot;https://github.com/ThreeTen/threeten&quot;&gt;ThreeTen&lt;/a&gt;, который можно использовать уже сейчас не дожидаясь выхода восьмерки. #datetime, &lt;span class=&#39;label&#39;&gt;#JSR-310&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Oracle &lt;a href=&quot;http://www.infoq.com/news/2012/09/adf-essentials&quot;&gt;выпустила&lt;/a&gt; урезанную бесплатную версию своего Java EE фреймворка &lt;a href=&quot;http://www.oracle.com/technetwork/developer-tools/adf/overview/index.html&quot;&gt;Application Development Framework&lt;/a&gt; (базирующегося на JSF) - &lt;a href=&quot;http://www.oracle.com/technetwork/developer-tools/adf/overview/adfessentials-1719844.html&quot;&gt;ADF Essentials&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#adf&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Очередной выпуск &lt;a href=&quot;https://blogs.oracle.com/javaspotlight/entry/java_spotlight_episode_101_javaone&quot;&gt;Java Spotlight&lt;/a&gt;. Интервью с докладчиками на предстоящей в Сан-Франциско конференции &lt;a href=&quot;http://www.oracle.com/javaone/index.html&quot;&gt;Java One&lt;/a&gt;. &lt;span class=&#39;label&#39;&gt;#spotlight&lt;/span&gt;  &lt;!-- more --&gt;&lt;/li&gt;
&lt;li&gt;OpenJDK &lt;a href=&quot;https://blogs.oracle.com/darcy/entry/milestone_jira_system_of_record&quot;&gt;переезжают&lt;/a&gt; с Sun&#39;овского легаси багтреккера на JIRA. Наконец-то у bugs.sun.com будет человеческий интерфейс. &lt;span class=&#39;label&#39;&gt;#jdk&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#jira&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.frankel.ch/why-i-enrolled-in-an-online-scala-course&quot;&gt;Почему стоит&lt;/a&gt; записаться на &lt;a href=&quot;https://www.coursera.org/course/progfun&quot;&gt;курс по функциональному программированию на Scala&lt;/a&gt; от Coursera. Я уже там на второй лекции, а Вы? &lt;span class=&#39;label&#39;&gt;#study&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#coursera&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Разное&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Видео-пародия &lt;a href=&quot;http://www.youtube.com/watch?v=Mk3qkQROb_k&amp;amp;feature=related&quot;&gt;Lady Java&lt;/a&gt; на попсовую певицу с вкраплениями околоджавных базвордов. &lt;span class=&#39;label&#39;&gt;#video&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#geekfun&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Еще одно &lt;a href=&quot;http://www.youtube.com/watch?NR=1&amp;amp;v=b-Cr0EWwaTk&amp;amp;feature=endscreen&quot;&gt;видео&lt;/a&gt; из этой серии (может кто не видел еще). &lt;span class=&#39;label&#39;&gt;#video&lt;/span&gt; &lt;span class=&#39;label&#39;&gt;#geekfun&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   <content type="html"><![CDATA[
      <h2>Новости</h2>

<ul>
<li><a href="http://www.security-explorations.com/en/about.html">Adam Gowdiak и Ко</a> в очередной раз (уже юбилейный 50й!) <a href="http://seclists.org/fulldisclosure/2012/Sep/170">нашли уязвимость</a>, позволяющую обойти ограничения песочницы во всех последних версиях Java SE (5u22, 6u35, 7u7). За последние лет 5 не видел ни одного сайта с java-аплетами и во всех браузерах у себя уже давно выключил их поддержку, чего и Вам советую. <span class='label'>#security</span></li>
<li>В JDK8 <a href="http://java.dzone.com/articles/introducing-new-date-and-time">представлен</a> новый API для работы с датами. По-моему отличная замена наполовину задеприкейченному java.util.Date. Также есть проект <a href="https://github.com/ThreeTen/threeten">ThreeTen</a>, который можно использовать уже сейчас не дожидаясь выхода восьмерки. #datetime, <span class='label'>#JSR-310</span></li>
<li>Oracle <a href="http://www.infoq.com/news/2012/09/adf-essentials">выпустила</a> урезанную бесплатную версию своего Java EE фреймворка <a href="http://www.oracle.com/technetwork/developer-tools/adf/overview/index.html">Application Development Framework</a> (базирующегося на JSF) - <a href="http://www.oracle.com/technetwork/developer-tools/adf/overview/adfessentials-1719844.html">ADF Essentials</a>. <span class='label'>#adf</span></li>
<li>Очередной выпуск <a href="https://blogs.oracle.com/javaspotlight/entry/java_spotlight_episode_101_javaone">Java Spotlight</a>. Интервью с докладчиками на предстоящей в Сан-Франциско конференции <a href="http://www.oracle.com/javaone/index.html">Java One</a>. <span class='label'>#spotlight</span>  
      
      
        <div><a href="http://www.polovko.me/blog/2012/09/28/nonamepost1/">Читать дальше &rarr;</a></div>
      
    ]]></content>
 </entry>
 
 <entry>
   <title type="html"><![CDATA[О размерах в Java]]></title>
   <link href="http://www.polovko.me/blog/2012/09/26/o-razmerah-v-java/"/>
   <updated>2012-09-26T12:17:00+04:00</updated>
   <id>http://www.polovko.me/blog/2012/09/26/o-razmerah-v-java</id>
   <content type="html">&lt;p&gt;Задался недавно вопросом: &quot;Как правильно оценить размер выделяемой памяти под объекты в Java?&quot;. На хабре есть несколько статей &lt;a href=&quot;http://habrahabr.ru/post/134102/&quot;&gt;[1]&lt;/a&gt;, &lt;a href=&quot;http://habrahabr.ru/post/134910/&quot;&gt;[2]&lt;/a&gt; посвященных этому вопросу. Но мне не совсем понравился подход, использованный авторами. Поэтому решил заглянуть внутрь OpenJDK Hotspot VM (далее по тексту Hotspot) и попытаться понять как все устроено на самом деле.&lt;/p&gt;

&lt;h2&gt;Типы данных в Java&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Примитивы. (byte, short, char, int, float, long, double, boolean).&lt;/li&gt;
&lt;li&gt;Объекты. Размер объекта зависит от конкретной реализации VM и архитектуры процессора. Поэтому дать однозначный ответ не получится. Все же хочется понять (на примере конкретной VM) какой размер памяти выделяется под java-объект.&lt;/li&gt;
&lt;li&gt;Массивы. Одномерные линейные структуры, которые могут содержать все перечисленные типы (включая другие  массивы). Массивы также являются объектами, но со специфичной структурой. &lt;!-- more --&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Примитивы&lt;/h3&gt;

&lt;p&gt;С размером примитивов все понятно - их размер определен в спецификации языка (&lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2&quot;&gt;JLS 4.2&lt;/a&gt;) и спецификации jvm (&lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.3&quot;&gt;JVMS 2.3&lt;/a&gt;). Интересно заметить, что для типа boolean jvm использует int, а не byte как могло бы показаться (&lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.3.4&quot;&gt;JMS 2.3.4&lt;/a&gt;). Также интересно, что при создании массива boolean[] под каждый элемент массива будет выделен 1 байт, а не 4.&lt;/p&gt;

&lt;table class=&quot;table table-bordered table-center&quot;&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;тип&lt;/th&gt;
        &lt;th&gt;размер (байт)&lt;/th&gt;
        &lt;th&gt;размер в массиве (байт)&lt;/th&gt;
        &lt;th&gt;допустимые значения&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;-128 .. 127&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;short&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;-32768 .. 32767&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;chart&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;&#39;\u0000&#39; .. &#39;\uffff&#39;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;-2147483648 .. 2147483647&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;float&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;-3.4028235e+38f .. 3.4028235e+38f&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;long&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;-9223372036854775808 .. 9223372036854775807&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;double&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;-1.7976931348623157e+308 .. 1.7976931348623157e+308&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;boolean&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;false, true&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;h3&gt;Объекты&lt;/h3&gt;

&lt;p&gt;Для описания экземпляров массивов Hotspot использует класс &lt;a href=&quot;http://hg.openjdk.java.net/jdk6/jdk6/hotspot/file/tip/src/share/vm/oops/arrayOop.hpp&quot;&gt;arrayOopDesc&lt;/a&gt;, для описания остальных Java-классов используется класс &lt;a href=&quot;http://hg.openjdk.java.net/jdk6/jdk6/hotspot/file/tip/src/share/vm/oops/instanceOop.hpp&quot;&gt;instanceOopDesc&lt;/a&gt;. Оба эти класса наследуются от &lt;a href=&quot;http://hg.openjdk.java.net/jdk6/jdk6/hotspot/file/tip/src/share/vm/oops/oop.hpp&quot;&gt;oopDesc&lt;/a&gt; и оба содержат методы для вычисления размера заголовка. Так например a instabceOopDesc вычисляет размер заголовка (в машинных словах) следующим образом:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;header_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instanceOopDesc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeapWordSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; где HeapWordSize определяется как размер указателя. В зависимости от архитектуры CPU 4 и 8 байт для x86 и x86_64 (в Oracle именуют x64) соответственно.
 Чтобы понять размер instanceOopDesc надо заглянуть в oopDesc, так как в самом instanceOopDesc никаких полей не объявлено. Вот что мы там увидим:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;oopDesc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;markOop&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_metadata&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wideKlassOop&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;_klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;narrowOop&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;_compressed_klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В файле &lt;a href=&quot;http://hg.openjdk.java.net/jdk6/jdk6/hotspot/file/tip/src/share/vm/oops/oopsHierarchy.hpp&quot;&gt;oopsHierarchy.hpp&lt;/a&gt; объявлены необходимые типы данных для работы с иерархией объектов oop (ordinary object pointer). Посмотрим как объявлены те типы, которые используются в oopDesc:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;juint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;narrowOop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Offset instead of address for an oop within a java object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;klassOopDesc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wideKlassOop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// to keep SA happy and unhandled&lt;/span&gt;
                                          &lt;span class=&quot;c1&quot;&gt;// oop detector happy.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;markOopDesc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;markOop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;То есть это два указателя (читай два машинных слова) для конкретной архитектуры - так называемое маркировочное слово (mark word) и адрес (который может быть представлен указателем или смещением) на метаданные класса.
Идея этого union metadata состоит в том, что при включенной опции &lt;code&gt;-XX:+UseCompressedOops&lt;/code&gt; будет использоваться 32х битное смещение (&lt;em&gt;_compressed_klass&lt;/em&gt;) а не 64х битный адрес (&lt;em&gt;_klass&lt;/em&gt;).
Получается размер заголовка java-объекта 8 байт для x86 и 16 байт для x86_64 в не зависимости от параметра UseCompressedOops:&lt;/p&gt;

&lt;table class=&quot;table table-bordered table-center&quot;&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;Архитектура&lt;/th&gt;
        &lt;th&gt;-XX:+UseCompressedOops&lt;/th&gt;
        &lt;th&gt;-XX:-UseCompressedOops&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;x86&lt;/td&gt;&lt;td colspan=&quot;2&quot;&gt;8 байт (&lt;code&gt;4 + 4&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;x86_64&lt;/td&gt;&lt;td colspan=&quot;2&quot;&gt;16 байт (&lt;code&gt;8 + 8&lt;/code&gt;)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;h3&gt;Массивы&lt;/h3&gt;

&lt;p&gt;В arrayOopDesc размер заголовка вычисляется следующим образом:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;header_size_in_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;align_size_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length_offset_in_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeapWordSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;где&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;align_size_up&lt;/em&gt; - инлайнер для выравнивания первого аргумента по второму. Например &lt;code&gt;align_size_up(12, 8) = 16&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;length_offset_in_bytes&lt;/em&gt; - возвращает размер заголовка в байтах в зависимости от опции &lt;code&gt;-XX:+UseCompressedOops&lt;/code&gt;. Если она включена, то размер равен &lt;code&gt;sizeof(markOop) + sizeof(narrowOop)&lt;/code&gt; = 8 (4 + 4) байт для x86 и 12 (8 + 4) байт для x86_64. При выключенной опции размер равен &lt;code&gt;sizeof(arrayOopDesc)&lt;/code&gt; = 8 байт для x86 и 16 байт для x86_64.&lt;/li&gt;
&lt;li&gt;заметьте, что к вычисленному размеру прибавляется &lt;code&gt;sizeof(int)&lt;/code&gt;. Это делается для того чтобы &quot;зарезервировать место&quot; под поле &lt;em&gt;length&lt;/em&gt; массива, так как оно явно не определено в классе. При включенной ссылочной компрессии (актуально только для 64x битной архитектуры) это поле займет вторую половину поля &lt;em&gt;_klass&lt;/em&gt; (см. класс oopDesc)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Посчитаем, что у нас получается. Размер заголовка массива после выравнивания:&lt;/p&gt;

&lt;table class=&quot;table table-bordered table-center&quot;&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;Архитектура&lt;/th&gt;
        &lt;th&gt;-XX:+UseCompressedOops&lt;/th&gt;
        &lt;th&gt;-XX:-UseCompressedOops&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;x86&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;12 байт (&lt;code&gt;4 + 4 + 4 align 4&lt;/code&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;x86_64&lt;/td&gt;
        &lt;td&gt;16 байт (&lt;code&gt;8 + 4 + 4 align 8&lt;/code&gt;)&lt;/td&gt;
        &lt;td&gt;24 байта (&lt;code&gt;8 + 8 + 4 align 8&lt;/code&gt;)&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;h2&gt;Выравнивание&lt;/h2&gt;

&lt;p&gt;Для предотвращения ситуаций ложного совместного использования строки кэша (cache-line &lt;a href=&quot;http://en.wikipedia.org/wiki/False_sharing&quot;&gt;false sharing&lt;/a&gt;) размер объекта в Hotspot выравнивается по 8 байтовой границе. То есть если объект будет занимать даже 1 байт под него выделится 8 байт. Размер границы выравнивания выбирается таким образом, чтобы строка кэша была кратна этой границе, а также эта граница должна быть степенью двойки, а также кратна машинному слову. Так как у большинства современных процессоров размер строки кэша составляет 64 байта, а размер машинного слова - 4/8 байт, то размер границы был выбран равным 8 байт. В файле &lt;a href=&quot;http://hg.openjdk.java.net/jdk6/jdk6/hotspot/file/tip/src/share/vm/utilities/globalDefinitions.hpp&quot;&gt;globalDefinitions.hpp&lt;/a&gt; есть соответствующие определения (строки 372 - 390). Здесь не буду приводить, интересующиеся могут сходить и посмотреть.&lt;/p&gt;

&lt;p&gt;Начиная с версии jdk6u21 размер выравнивания стал настраиваемым параметром. Его можно задать при помощи параметра &lt;code&gt;-XX:ObjectAlignmentInBytes=n&lt;/code&gt;. Допустимы значения 8 и 16.&lt;/p&gt;

&lt;h2&gt;И что же получается?&lt;/h2&gt;

&lt;p&gt;А получается следующая картина (для x86_64):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;// 0x00 +------------------+&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;//      | mark word        |  8 bytes&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;// 0x08 +------------------+&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;//      | klass oop        |  8 bytes&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;// 0x10 +------------------+&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//      | x                |  4 bytes&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;//      | y                |  4 bytes&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;//      | color            |  1 byte&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;// 0x19 +------------------+&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;//      | padding          |  7 bytes&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      |                  |&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...                                   // 0x20 +------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;                                            &lt;span class=&quot;c1&quot;&gt;//                    total: 32 bytes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Для массива char[] из 11 элементов (для x86_64):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// 0x00 +------------------+&lt;/span&gt;
    &lt;span class=&quot;sc&quot;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;//      | mark word        |  8 bytes&lt;/span&gt;
    &lt;span class=&quot;sc&quot;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// 0x08 +------------------+&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | klass oop        |  4 bytes&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;// 0x0c +------------------+&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | length           |  4 bytes&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;// 0x10 +------------------+&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39;H&amp;#39;              | 22 bytes&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39;e&amp;#39;              |&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39;l&amp;#39;              |&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39;l&amp;#39;              |&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39;o&amp;#39;              |&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39; &amp;#39;              |&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39;W&amp;#39;              |&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39;o&amp;#39;              |&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39;r&amp;#39;              |&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39;l&amp;#39;              |&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | &amp;#39;d&amp;#39;              |&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;// 0x26 +------------------+&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//      | padding          |  2 bytes&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;// 0x28 +------------------+&lt;/span&gt;
                                             &lt;span class=&quot;c1&quot;&gt;//                    total: 40 bytes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Что почитать по теме&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codeinstructions.com/2008/12/java-objects-memory-structure.html&quot;&gt;Java Objects Memory Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wikis.oracle.com/display/HotSpotInternals/Home&quot;&gt;HotSpotInternals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openjdk.java.net/groups/hotspot/docs/FOSDEM-2007-HotSpot.pdf&quot;&gt;FOSDEM-2007-HotSpot.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.princeton.edu/picasso/mats/HotspotOverview.pdf&quot;&gt;HotspotOverview.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ssw.jku.at/Research/Papers/Wimmer08PhD/Wimmer08PhD.pdf&quot;&gt;Wimmer08PhD.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   <content type="html"><![CDATA[
      <p>Задался недавно вопросом: "Как правильно оценить размер выделяемой памяти под объекты в Java?". На хабре есть несколько статей <a href="http://habrahabr.ru/post/134102/">[1]</a>, <a href="http://habrahabr.ru/post/134910/">[2]</a> посвященных этому вопросу. Но мне не совсем понравился подход, использованный авторами. Поэтому решил заглянуть внутрь OpenJDK Hotspot VM (далее по тексту Hotspot) и попытаться понять как все устроено на самом деле.</p>

<h2>Типы данных в Java</h2>

<ul>
<li>Примитивы. (byte, short, char, int, float, long, double, boolean).</li>
<li>Объекты. Размер объекта зависит от конкретной реализации VM и архитектуры процессора. Поэтому дать однозначный ответ не получится. Все же хочется понять (на примере конкретной VM) какой размер памяти выделяется под java-объект.</li>
<li>Массивы. Одномерные линейные структуры, которые могут содержать все перечисленные типы (включая другие  массивы). Массивы также являются объектами, но со специфичной структурой. 
      
      
        <div><a href="http://www.polovko.me/blog/2012/09/26/o-razmerah-v-java/">Читать дальше &rarr;</a></div>
      
    ]]></content>
 </entry>
 

</feed>
